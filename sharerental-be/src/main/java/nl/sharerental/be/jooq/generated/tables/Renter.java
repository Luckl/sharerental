/*
 * This file is generated by jOOQ.
 */
package nl.sharerental.be.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import nl.sharerental.be.jooq.generated.Keys;
import nl.sharerental.be.jooq.generated.Public;
import nl.sharerental.be.jooq.generated.tables.Location.LocationPath;
import nl.sharerental.be.jooq.generated.tables.Transaction.TransactionPath;
import nl.sharerental.be.jooq.generated.tables.Usr.UsrPath;
import nl.sharerental.be.jooq.generated.tables.records.RenterRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Renter extends TableImpl<RenterRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.renter</code>
     */
    public static final Renter RENTER = new Renter();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RenterRecord> getRecordType() {
        return RenterRecord.class;
    }

    /**
     * The column <code>public.renter.id</code>.
     */
    public final TableField<RenterRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.renter.first_name</code>.
     */
    public final TableField<RenterRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.renter.last_name</code>.
     */
    public final TableField<RenterRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.renter.phone_number</code>.
     */
    public final TableField<RenterRecord, String> PHONE_NUMBER = createField(DSL.name("phone_number"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.renter.email</code>.
     */
    public final TableField<RenterRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.renter.location_id</code>.
     */
    public final TableField<RenterRecord, Long> LOCATION_ID = createField(DSL.name("location_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.renter.created_at</code>.
     */
    public final TableField<RenterRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.renter.entered_by_user</code>.
     */
    public final TableField<RenterRecord, String> ENTERED_BY_USER = createField(DSL.name("entered_by_user"), SQLDataType.CLOB, this, "");

    private Renter(Name alias, Table<RenterRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Renter(Name alias, Table<RenterRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.renter</code> table reference
     */
    public Renter(String alias) {
        this(DSL.name(alias), RENTER);
    }

    /**
     * Create an aliased <code>public.renter</code> table reference
     */
    public Renter(Name alias) {
        this(alias, RENTER);
    }

    /**
     * Create a <code>public.renter</code> table reference
     */
    public Renter() {
        this(DSL.name("renter"), null);
    }

    public <O extends Record> Renter(Table<O> path, ForeignKey<O, RenterRecord> childPath, InverseForeignKey<O, RenterRecord> parentPath) {
        super(path, childPath, parentPath, RENTER);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class RenterPath extends Renter implements Path<RenterRecord> {
        public <O extends Record> RenterPath(Table<O> path, ForeignKey<O, RenterRecord> childPath, InverseForeignKey<O, RenterRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private RenterPath(Name alias, Table<RenterRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public RenterPath as(String alias) {
            return new RenterPath(DSL.name(alias), this);
        }

        @Override
        public RenterPath as(Name alias) {
            return new RenterPath(alias, this);
        }

        @Override
        public RenterPath as(Table<?> alias) {
            return new RenterPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<RenterRecord, Long> getIdentity() {
        return (Identity<RenterRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<RenterRecord> getPrimaryKey() {
        return Keys.RENTER_PKEY;
    }

    @Override
    public List<ForeignKey<RenterRecord, ?>> getReferences() {
        return Arrays.asList(Keys.RENTER__RENTER_LOCATION_FKEY, Keys.RENTER__RENTER_ENTERED_BY_USER_FKEY);
    }

    private transient LocationPath _location;

    /**
     * Get the implicit join path to the <code>public.location</code> table.
     */
    public LocationPath location() {
        if (_location == null)
            _location = new LocationPath(this, Keys.RENTER__RENTER_LOCATION_FKEY, null);

        return _location;
    }

    private transient UsrPath _usr;

    /**
     * Get the implicit join path to the <code>public.usr</code> table.
     */
    public UsrPath usr() {
        if (_usr == null)
            _usr = new UsrPath(this, Keys.RENTER__RENTER_ENTERED_BY_USER_FKEY, null);

        return _usr;
    }

    private transient TransactionPath _transaction;

    /**
     * Get the implicit to-many join path to the <code>public.transaction</code>
     * table
     */
    public TransactionPath transaction() {
        if (_transaction == null)
            _transaction = new TransactionPath(this, null, Keys.TRANSACTION__TRANSACTION_RENTER_INFORMATION_FKEY.getInverseKey());

        return _transaction;
    }

    @Override
    public Renter as(String alias) {
        return new Renter(DSL.name(alias), this);
    }

    @Override
    public Renter as(Name alias) {
        return new Renter(alias, this);
    }

    @Override
    public Renter as(Table<?> alias) {
        return new Renter(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Renter rename(String name) {
        return new Renter(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Renter rename(Name name) {
        return new Renter(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Renter rename(Table<?> name) {
        return new Renter(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Renter where(Condition condition) {
        return new Renter(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Renter where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Renter where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Renter where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Renter where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Renter where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Renter where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Renter where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Renter whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Renter whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
