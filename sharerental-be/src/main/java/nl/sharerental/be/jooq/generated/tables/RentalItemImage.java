/*
 * This file is generated by jOOQ.
 */
package nl.sharerental.be.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import nl.sharerental.be.jooq.generated.Keys;
import nl.sharerental.be.jooq.generated.Public;
import nl.sharerental.be.jooq.generated.tables.Image.ImagePath;
import nl.sharerental.be.jooq.generated.tables.RentalItem.RentalItemPath;
import nl.sharerental.be.jooq.generated.tables.records.RentalItemImageRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RentalItemImage extends TableImpl<RentalItemImageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.rental_item_image</code>
     */
    public static final RentalItemImage RENTAL_ITEM_IMAGE = new RentalItemImage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RentalItemImageRecord> getRecordType() {
        return RentalItemImageRecord.class;
    }

    /**
     * The column <code>public.rental_item_image.image_id</code>.
     */
    public final TableField<RentalItemImageRecord, Long> IMAGE_ID = createField(DSL.name("image_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.rental_item_image.rental_item_id</code>.
     */
    public final TableField<RentalItemImageRecord, Long> RENTAL_ITEM_ID = createField(DSL.name("rental_item_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private RentalItemImage(Name alias, Table<RentalItemImageRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private RentalItemImage(Name alias, Table<RentalItemImageRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.rental_item_image</code> table reference
     */
    public RentalItemImage(String alias) {
        this(DSL.name(alias), RENTAL_ITEM_IMAGE);
    }

    /**
     * Create an aliased <code>public.rental_item_image</code> table reference
     */
    public RentalItemImage(Name alias) {
        this(alias, RENTAL_ITEM_IMAGE);
    }

    /**
     * Create a <code>public.rental_item_image</code> table reference
     */
    public RentalItemImage() {
        this(DSL.name("rental_item_image"), null);
    }

    public <O extends Record> RentalItemImage(Table<O> path, ForeignKey<O, RentalItemImageRecord> childPath, InverseForeignKey<O, RentalItemImageRecord> parentPath) {
        super(path, childPath, parentPath, RENTAL_ITEM_IMAGE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class RentalItemImagePath extends RentalItemImage implements Path<RentalItemImageRecord> {
        public <O extends Record> RentalItemImagePath(Table<O> path, ForeignKey<O, RentalItemImageRecord> childPath, InverseForeignKey<O, RentalItemImageRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private RentalItemImagePath(Name alias, Table<RentalItemImageRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public RentalItemImagePath as(String alias) {
            return new RentalItemImagePath(DSL.name(alias), this);
        }

        @Override
        public RentalItemImagePath as(Name alias) {
            return new RentalItemImagePath(alias, this);
        }

        @Override
        public RentalItemImagePath as(Table<?> alias) {
            return new RentalItemImagePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<RentalItemImageRecord> getPrimaryKey() {
        return Keys.RENTAL_ITEM_IMAGE_PKEY;
    }

    @Override
    public List<ForeignKey<RentalItemImageRecord, ?>> getReferences() {
        return Arrays.asList(Keys.RENTAL_ITEM_IMAGE__RENTAL_ITEM_IMAGE_IMAGE_ID_FKEY, Keys.RENTAL_ITEM_IMAGE__RENTAL_ITEM_IMAGE_RENTAL_ITEM_ID_FKEY);
    }

    private transient ImagePath _image;

    /**
     * Get the implicit join path to the <code>public.image</code> table.
     */
    public ImagePath image() {
        if (_image == null)
            _image = new ImagePath(this, Keys.RENTAL_ITEM_IMAGE__RENTAL_ITEM_IMAGE_IMAGE_ID_FKEY, null);

        return _image;
    }

    private transient RentalItemPath _rentalItem;

    /**
     * Get the implicit join path to the <code>public.rental_item</code> table.
     */
    public RentalItemPath rentalItem() {
        if (_rentalItem == null)
            _rentalItem = new RentalItemPath(this, Keys.RENTAL_ITEM_IMAGE__RENTAL_ITEM_IMAGE_RENTAL_ITEM_ID_FKEY, null);

        return _rentalItem;
    }

    @Override
    public RentalItemImage as(String alias) {
        return new RentalItemImage(DSL.name(alias), this);
    }

    @Override
    public RentalItemImage as(Name alias) {
        return new RentalItemImage(alias, this);
    }

    @Override
    public RentalItemImage as(Table<?> alias) {
        return new RentalItemImage(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RentalItemImage rename(String name) {
        return new RentalItemImage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RentalItemImage rename(Name name) {
        return new RentalItemImage(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RentalItemImage rename(Table<?> name) {
        return new RentalItemImage(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RentalItemImage where(Condition condition) {
        return new RentalItemImage(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RentalItemImage where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RentalItemImage where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RentalItemImage where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RentalItemImage where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RentalItemImage where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RentalItemImage where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RentalItemImage where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RentalItemImage whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RentalItemImage whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
