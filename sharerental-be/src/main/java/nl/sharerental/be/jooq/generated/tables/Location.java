/*
 * This file is generated by jOOQ.
 */
package nl.sharerental.be.jooq.generated.tables;


import java.util.Collection;

import nl.sharerental.be.jooq.generated.Keys;
import nl.sharerental.be.jooq.generated.Public;
import nl.sharerental.be.jooq.generated.tables.Lessor.LessorPath;
import nl.sharerental.be.jooq.generated.tables.LessorLocation.LessorLocationPath;
import nl.sharerental.be.jooq.generated.tables.Renter.RenterPath;
import nl.sharerental.be.jooq.generated.tables.records.LocationRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Location extends TableImpl<LocationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.location</code>
     */
    public static final Location LOCATION = new Location();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LocationRecord> getRecordType() {
        return LocationRecord.class;
    }

    /**
     * The column <code>public.location.id</code>.
     */
    public final TableField<LocationRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.location.address_line_1</code>.
     */
    public final TableField<LocationRecord, String> ADDRESS_LINE_1 = createField(DSL.name("address_line_1"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.location.address_line_2</code>.
     */
    public final TableField<LocationRecord, String> ADDRESS_LINE_2 = createField(DSL.name("address_line_2"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.location.address_line_3</code>.
     */
    public final TableField<LocationRecord, String> ADDRESS_LINE_3 = createField(DSL.name("address_line_3"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.location.street</code>.
     */
    public final TableField<LocationRecord, String> STREET = createField(DSL.name("street"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.location.house_number</code>.
     */
    public final TableField<LocationRecord, String> HOUSE_NUMBER = createField(DSL.name("house_number"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.location.postal_code</code>.
     */
    public final TableField<LocationRecord, String> POSTAL_CODE = createField(DSL.name("postal_code"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.location.city</code>.
     */
    public final TableField<LocationRecord, String> CITY = createField(DSL.name("city"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.location.country</code>.
     */
    public final TableField<LocationRecord, String> COUNTRY = createField(DSL.name("country"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.location.geo_location</code>.
     */
    public final TableField<LocationRecord, String> GEO_LOCATION = createField(DSL.name("geo_location"), SQLDataType.CLOB, this, "");

    private Location(Name alias, Table<LocationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Location(Name alias, Table<LocationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.location</code> table reference
     */
    public Location(String alias) {
        this(DSL.name(alias), LOCATION);
    }

    /**
     * Create an aliased <code>public.location</code> table reference
     */
    public Location(Name alias) {
        this(alias, LOCATION);
    }

    /**
     * Create a <code>public.location</code> table reference
     */
    public Location() {
        this(DSL.name("location"), null);
    }

    public <O extends Record> Location(Table<O> path, ForeignKey<O, LocationRecord> childPath, InverseForeignKey<O, LocationRecord> parentPath) {
        super(path, childPath, parentPath, LOCATION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class LocationPath extends Location implements Path<LocationRecord> {
        public <O extends Record> LocationPath(Table<O> path, ForeignKey<O, LocationRecord> childPath, InverseForeignKey<O, LocationRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private LocationPath(Name alias, Table<LocationRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public LocationPath as(String alias) {
            return new LocationPath(DSL.name(alias), this);
        }

        @Override
        public LocationPath as(Name alias) {
            return new LocationPath(alias, this);
        }

        @Override
        public LocationPath as(Table<?> alias) {
            return new LocationPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<LocationRecord, Long> getIdentity() {
        return (Identity<LocationRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<LocationRecord> getPrimaryKey() {
        return Keys.LOCATION_PKEY;
    }

    private transient LessorPath _lessor;

    /**
     * Get the implicit to-many join path to the <code>public.lessor</code>
     * table
     */
    public LessorPath lessor() {
        if (_lessor == null)
            _lessor = new LessorPath(this, null, Keys.LESSOR__LESSOR_PRIMARY_LOCATION_FKEY.getInverseKey());

        return _lessor;
    }

    private transient LessorLocationPath _lessorLocation;

    /**
     * Get the implicit to-many join path to the
     * <code>public.lessor_location</code> table
     */
    public LessorLocationPath lessorLocation() {
        if (_lessorLocation == null)
            _lessorLocation = new LessorLocationPath(this, null, Keys.LESSOR_LOCATION__LESSOR_LOCATION_LOCATION_ID_FKEY.getInverseKey());

        return _lessorLocation;
    }

    private transient RenterPath _renter;

    /**
     * Get the implicit to-many join path to the <code>public.renter</code>
     * table
     */
    public RenterPath renter() {
        if (_renter == null)
            _renter = new RenterPath(this, null, Keys.RENTER__RENTER_LOCATION_FKEY.getInverseKey());

        return _renter;
    }

    @Override
    public Location as(String alias) {
        return new Location(DSL.name(alias), this);
    }

    @Override
    public Location as(Name alias) {
        return new Location(alias, this);
    }

    @Override
    public Location as(Table<?> alias) {
        return new Location(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Location rename(String name) {
        return new Location(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Location rename(Name name) {
        return new Location(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Location rename(Table<?> name) {
        return new Location(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Location where(Condition condition) {
        return new Location(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Location where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Location where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Location where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Location where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Location where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Location where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Location where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Location whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Location whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
