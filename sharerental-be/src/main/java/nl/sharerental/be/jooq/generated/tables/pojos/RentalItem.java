/*
 * This file is generated by jOOQ.
 */
package nl.sharerental.be.jooq.generated.tables.pojos;


import java.io.Serializable;
import java.math.BigDecimal;

import nl.sharerental.be.jooq.generated.enums.FuelTypeEnum;
import nl.sharerental.be.jooq.generated.enums.RentalItemDisplayStatus;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RentalItem implements Serializable {

    private static final long serialVersionUID = 1L;

    private final Long id;
    private final Long ownerId;
    private final String name;
    private final String externalReference;
    private final String shortDescription;
    private final String longDescription;
    private final BigDecimal price_24h;
    private final BigDecimal price_48h;
    private final BigDecimal price_168h;
    private final Boolean deliveryPossible;
    private final BigDecimal deliveryPrice;
    private final String category;
    private final BigDecimal reachMeters;
    private final BigDecimal carryingWeightKilograms;
    private final BigDecimal maximumWorkHeightMeters;
    private final BigDecimal intrinsicWeightKilograms;
    private final String materialType;
    private final String brand;
    private final BigDecimal maximumPressureBars;
    private final BigDecimal maximumHorsePower;
    private final BigDecimal requiredPowerVoltageVolt;
    private final BigDecimal workWidthMeters;
    private final Boolean vacuumAttachmentPossible;
    private final BigDecimal capacityLiters;
    private final BigDecimal itemHeight;
    private final BigDecimal itemWidth;
    private final BigDecimal itemLength;
    private final BigDecimal powerWatt;
    private final BigDecimal maximumSurfaceSquareMeters;
    private final FuelTypeEnum fuelType;
    private final RentalItemDisplayStatus displayStatus;
    private final String slug;
    private final BigDecimal amount;

    public RentalItem(RentalItem value) {
        this.id = value.id;
        this.ownerId = value.ownerId;
        this.name = value.name;
        this.externalReference = value.externalReference;
        this.shortDescription = value.shortDescription;
        this.longDescription = value.longDescription;
        this.price_24h = value.price_24h;
        this.price_48h = value.price_48h;
        this.price_168h = value.price_168h;
        this.deliveryPossible = value.deliveryPossible;
        this.deliveryPrice = value.deliveryPrice;
        this.category = value.category;
        this.reachMeters = value.reachMeters;
        this.carryingWeightKilograms = value.carryingWeightKilograms;
        this.maximumWorkHeightMeters = value.maximumWorkHeightMeters;
        this.intrinsicWeightKilograms = value.intrinsicWeightKilograms;
        this.materialType = value.materialType;
        this.brand = value.brand;
        this.maximumPressureBars = value.maximumPressureBars;
        this.maximumHorsePower = value.maximumHorsePower;
        this.requiredPowerVoltageVolt = value.requiredPowerVoltageVolt;
        this.workWidthMeters = value.workWidthMeters;
        this.vacuumAttachmentPossible = value.vacuumAttachmentPossible;
        this.capacityLiters = value.capacityLiters;
        this.itemHeight = value.itemHeight;
        this.itemWidth = value.itemWidth;
        this.itemLength = value.itemLength;
        this.powerWatt = value.powerWatt;
        this.maximumSurfaceSquareMeters = value.maximumSurfaceSquareMeters;
        this.fuelType = value.fuelType;
        this.displayStatus = value.displayStatus;
        this.slug = value.slug;
        this.amount = value.amount;
    }

    public RentalItem(
        Long id,
        Long ownerId,
        String name,
        String externalReference,
        String shortDescription,
        String longDescription,
        BigDecimal price_24h,
        BigDecimal price_48h,
        BigDecimal price_168h,
        Boolean deliveryPossible,
        BigDecimal deliveryPrice,
        String category,
        BigDecimal reachMeters,
        BigDecimal carryingWeightKilograms,
        BigDecimal maximumWorkHeightMeters,
        BigDecimal intrinsicWeightKilograms,
        String materialType,
        String brand,
        BigDecimal maximumPressureBars,
        BigDecimal maximumHorsePower,
        BigDecimal requiredPowerVoltageVolt,
        BigDecimal workWidthMeters,
        Boolean vacuumAttachmentPossible,
        BigDecimal capacityLiters,
        BigDecimal itemHeight,
        BigDecimal itemWidth,
        BigDecimal itemLength,
        BigDecimal powerWatt,
        BigDecimal maximumSurfaceSquareMeters,
        FuelTypeEnum fuelType,
        RentalItemDisplayStatus displayStatus,
        String slug,
        BigDecimal amount
    ) {
        this.id = id;
        this.ownerId = ownerId;
        this.name = name;
        this.externalReference = externalReference;
        this.shortDescription = shortDescription;
        this.longDescription = longDescription;
        this.price_24h = price_24h;
        this.price_48h = price_48h;
        this.price_168h = price_168h;
        this.deliveryPossible = deliveryPossible;
        this.deliveryPrice = deliveryPrice;
        this.category = category;
        this.reachMeters = reachMeters;
        this.carryingWeightKilograms = carryingWeightKilograms;
        this.maximumWorkHeightMeters = maximumWorkHeightMeters;
        this.intrinsicWeightKilograms = intrinsicWeightKilograms;
        this.materialType = materialType;
        this.brand = brand;
        this.maximumPressureBars = maximumPressureBars;
        this.maximumHorsePower = maximumHorsePower;
        this.requiredPowerVoltageVolt = requiredPowerVoltageVolt;
        this.workWidthMeters = workWidthMeters;
        this.vacuumAttachmentPossible = vacuumAttachmentPossible;
        this.capacityLiters = capacityLiters;
        this.itemHeight = itemHeight;
        this.itemWidth = itemWidth;
        this.itemLength = itemLength;
        this.powerWatt = powerWatt;
        this.maximumSurfaceSquareMeters = maximumSurfaceSquareMeters;
        this.fuelType = fuelType;
        this.displayStatus = displayStatus;
        this.slug = slug;
        this.amount = amount;
    }

    /**
     * Getter for <code>public.rental_item.id</code>.
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Getter for <code>public.rental_item.owner_id</code>.
     */
    public Long getOwnerId() {
        return this.ownerId;
    }

    /**
     * Getter for <code>public.rental_item.name</code>.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Getter for <code>public.rental_item.external_reference</code>.
     */
    public String getExternalReference() {
        return this.externalReference;
    }

    /**
     * Getter for <code>public.rental_item.short_description</code>.
     */
    public String getShortDescription() {
        return this.shortDescription;
    }

    /**
     * Getter for <code>public.rental_item.long_description</code>.
     */
    public String getLongDescription() {
        return this.longDescription;
    }

    /**
     * Getter for <code>public.rental_item.price_24h</code>.
     */
    public BigDecimal getPrice_24h() {
        return this.price_24h;
    }

    /**
     * Getter for <code>public.rental_item.price_48h</code>.
     */
    public BigDecimal getPrice_48h() {
        return this.price_48h;
    }

    /**
     * Getter for <code>public.rental_item.price_168h</code>.
     */
    public BigDecimal getPrice_168h() {
        return this.price_168h;
    }

    /**
     * Getter for <code>public.rental_item.delivery_possible</code>.
     */
    public Boolean getDeliveryPossible() {
        return this.deliveryPossible;
    }

    /**
     * Getter for <code>public.rental_item.delivery_price</code>.
     */
    public BigDecimal getDeliveryPrice() {
        return this.deliveryPrice;
    }

    /**
     * Getter for <code>public.rental_item.category</code>.
     */
    public String getCategory() {
        return this.category;
    }

    /**
     * Getter for <code>public.rental_item.reach_meters</code>.
     */
    public BigDecimal getReachMeters() {
        return this.reachMeters;
    }

    /**
     * Getter for <code>public.rental_item.carrying_weight_kilograms</code>.
     */
    public BigDecimal getCarryingWeightKilograms() {
        return this.carryingWeightKilograms;
    }

    /**
     * Getter for <code>public.rental_item.maximum_work_height_meters</code>.
     */
    public BigDecimal getMaximumWorkHeightMeters() {
        return this.maximumWorkHeightMeters;
    }

    /**
     * Getter for <code>public.rental_item.intrinsic_weight_kilograms</code>.
     */
    public BigDecimal getIntrinsicWeightKilograms() {
        return this.intrinsicWeightKilograms;
    }

    /**
     * Getter for <code>public.rental_item.material_type</code>.
     */
    public String getMaterialType() {
        return this.materialType;
    }

    /**
     * Getter for <code>public.rental_item.brand</code>.
     */
    public String getBrand() {
        return this.brand;
    }

    /**
     * Getter for <code>public.rental_item.maximum_pressure_bars</code>.
     */
    public BigDecimal getMaximumPressureBars() {
        return this.maximumPressureBars;
    }

    /**
     * Getter for <code>public.rental_item.maximum_horse_power</code>.
     */
    public BigDecimal getMaximumHorsePower() {
        return this.maximumHorsePower;
    }

    /**
     * Getter for <code>public.rental_item.required_power_voltage_volt</code>.
     */
    public BigDecimal getRequiredPowerVoltageVolt() {
        return this.requiredPowerVoltageVolt;
    }

    /**
     * Getter for <code>public.rental_item.work_width_meters</code>.
     */
    public BigDecimal getWorkWidthMeters() {
        return this.workWidthMeters;
    }

    /**
     * Getter for <code>public.rental_item.vacuum_attachment_possible</code>.
     */
    public Boolean getVacuumAttachmentPossible() {
        return this.vacuumAttachmentPossible;
    }

    /**
     * Getter for <code>public.rental_item.capacity_liters</code>.
     */
    public BigDecimal getCapacityLiters() {
        return this.capacityLiters;
    }

    /**
     * Getter for <code>public.rental_item.item_height</code>.
     */
    public BigDecimal getItemHeight() {
        return this.itemHeight;
    }

    /**
     * Getter for <code>public.rental_item.item_width</code>.
     */
    public BigDecimal getItemWidth() {
        return this.itemWidth;
    }

    /**
     * Getter for <code>public.rental_item.item_length</code>.
     */
    public BigDecimal getItemLength() {
        return this.itemLength;
    }

    /**
     * Getter for <code>public.rental_item.power_watt</code>.
     */
    public BigDecimal getPowerWatt() {
        return this.powerWatt;
    }

    /**
     * Getter for <code>public.rental_item.maximum_surface_square_meters</code>.
     */
    public BigDecimal getMaximumSurfaceSquareMeters() {
        return this.maximumSurfaceSquareMeters;
    }

    /**
     * Getter for <code>public.rental_item.fuel_type</code>.
     */
    public FuelTypeEnum getFuelType() {
        return this.fuelType;
    }

    /**
     * Getter for <code>public.rental_item.display_status</code>.
     */
    public RentalItemDisplayStatus getDisplayStatus() {
        return this.displayStatus;
    }

    /**
     * Getter for <code>public.rental_item.slug</code>.
     */
    public String getSlug() {
        return this.slug;
    }

    /**
     * Getter for <code>public.rental_item.amount</code>.
     */
    public BigDecimal getAmount() {
        return this.amount;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final RentalItem other = (RentalItem) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.ownerId == null) {
            if (other.ownerId != null)
                return false;
        }
        else if (!this.ownerId.equals(other.ownerId))
            return false;
        if (this.name == null) {
            if (other.name != null)
                return false;
        }
        else if (!this.name.equals(other.name))
            return false;
        if (this.externalReference == null) {
            if (other.externalReference != null)
                return false;
        }
        else if (!this.externalReference.equals(other.externalReference))
            return false;
        if (this.shortDescription == null) {
            if (other.shortDescription != null)
                return false;
        }
        else if (!this.shortDescription.equals(other.shortDescription))
            return false;
        if (this.longDescription == null) {
            if (other.longDescription != null)
                return false;
        }
        else if (!this.longDescription.equals(other.longDescription))
            return false;
        if (this.price_24h == null) {
            if (other.price_24h != null)
                return false;
        }
        else if (!this.price_24h.equals(other.price_24h))
            return false;
        if (this.price_48h == null) {
            if (other.price_48h != null)
                return false;
        }
        else if (!this.price_48h.equals(other.price_48h))
            return false;
        if (this.price_168h == null) {
            if (other.price_168h != null)
                return false;
        }
        else if (!this.price_168h.equals(other.price_168h))
            return false;
        if (this.deliveryPossible == null) {
            if (other.deliveryPossible != null)
                return false;
        }
        else if (!this.deliveryPossible.equals(other.deliveryPossible))
            return false;
        if (this.deliveryPrice == null) {
            if (other.deliveryPrice != null)
                return false;
        }
        else if (!this.deliveryPrice.equals(other.deliveryPrice))
            return false;
        if (this.category == null) {
            if (other.category != null)
                return false;
        }
        else if (!this.category.equals(other.category))
            return false;
        if (this.reachMeters == null) {
            if (other.reachMeters != null)
                return false;
        }
        else if (!this.reachMeters.equals(other.reachMeters))
            return false;
        if (this.carryingWeightKilograms == null) {
            if (other.carryingWeightKilograms != null)
                return false;
        }
        else if (!this.carryingWeightKilograms.equals(other.carryingWeightKilograms))
            return false;
        if (this.maximumWorkHeightMeters == null) {
            if (other.maximumWorkHeightMeters != null)
                return false;
        }
        else if (!this.maximumWorkHeightMeters.equals(other.maximumWorkHeightMeters))
            return false;
        if (this.intrinsicWeightKilograms == null) {
            if (other.intrinsicWeightKilograms != null)
                return false;
        }
        else if (!this.intrinsicWeightKilograms.equals(other.intrinsicWeightKilograms))
            return false;
        if (this.materialType == null) {
            if (other.materialType != null)
                return false;
        }
        else if (!this.materialType.equals(other.materialType))
            return false;
        if (this.brand == null) {
            if (other.brand != null)
                return false;
        }
        else if (!this.brand.equals(other.brand))
            return false;
        if (this.maximumPressureBars == null) {
            if (other.maximumPressureBars != null)
                return false;
        }
        else if (!this.maximumPressureBars.equals(other.maximumPressureBars))
            return false;
        if (this.maximumHorsePower == null) {
            if (other.maximumHorsePower != null)
                return false;
        }
        else if (!this.maximumHorsePower.equals(other.maximumHorsePower))
            return false;
        if (this.requiredPowerVoltageVolt == null) {
            if (other.requiredPowerVoltageVolt != null)
                return false;
        }
        else if (!this.requiredPowerVoltageVolt.equals(other.requiredPowerVoltageVolt))
            return false;
        if (this.workWidthMeters == null) {
            if (other.workWidthMeters != null)
                return false;
        }
        else if (!this.workWidthMeters.equals(other.workWidthMeters))
            return false;
        if (this.vacuumAttachmentPossible == null) {
            if (other.vacuumAttachmentPossible != null)
                return false;
        }
        else if (!this.vacuumAttachmentPossible.equals(other.vacuumAttachmentPossible))
            return false;
        if (this.capacityLiters == null) {
            if (other.capacityLiters != null)
                return false;
        }
        else if (!this.capacityLiters.equals(other.capacityLiters))
            return false;
        if (this.itemHeight == null) {
            if (other.itemHeight != null)
                return false;
        }
        else if (!this.itemHeight.equals(other.itemHeight))
            return false;
        if (this.itemWidth == null) {
            if (other.itemWidth != null)
                return false;
        }
        else if (!this.itemWidth.equals(other.itemWidth))
            return false;
        if (this.itemLength == null) {
            if (other.itemLength != null)
                return false;
        }
        else if (!this.itemLength.equals(other.itemLength))
            return false;
        if (this.powerWatt == null) {
            if (other.powerWatt != null)
                return false;
        }
        else if (!this.powerWatt.equals(other.powerWatt))
            return false;
        if (this.maximumSurfaceSquareMeters == null) {
            if (other.maximumSurfaceSquareMeters != null)
                return false;
        }
        else if (!this.maximumSurfaceSquareMeters.equals(other.maximumSurfaceSquareMeters))
            return false;
        if (this.fuelType == null) {
            if (other.fuelType != null)
                return false;
        }
        else if (!this.fuelType.equals(other.fuelType))
            return false;
        if (this.displayStatus == null) {
            if (other.displayStatus != null)
                return false;
        }
        else if (!this.displayStatus.equals(other.displayStatus))
            return false;
        if (this.slug == null) {
            if (other.slug != null)
                return false;
        }
        else if (!this.slug.equals(other.slug))
            return false;
        if (this.amount == null) {
            if (other.amount != null)
                return false;
        }
        else if (!this.amount.equals(other.amount))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.ownerId == null) ? 0 : this.ownerId.hashCode());
        result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
        result = prime * result + ((this.externalReference == null) ? 0 : this.externalReference.hashCode());
        result = prime * result + ((this.shortDescription == null) ? 0 : this.shortDescription.hashCode());
        result = prime * result + ((this.longDescription == null) ? 0 : this.longDescription.hashCode());
        result = prime * result + ((this.price_24h == null) ? 0 : this.price_24h.hashCode());
        result = prime * result + ((this.price_48h == null) ? 0 : this.price_48h.hashCode());
        result = prime * result + ((this.price_168h == null) ? 0 : this.price_168h.hashCode());
        result = prime * result + ((this.deliveryPossible == null) ? 0 : this.deliveryPossible.hashCode());
        result = prime * result + ((this.deliveryPrice == null) ? 0 : this.deliveryPrice.hashCode());
        result = prime * result + ((this.category == null) ? 0 : this.category.hashCode());
        result = prime * result + ((this.reachMeters == null) ? 0 : this.reachMeters.hashCode());
        result = prime * result + ((this.carryingWeightKilograms == null) ? 0 : this.carryingWeightKilograms.hashCode());
        result = prime * result + ((this.maximumWorkHeightMeters == null) ? 0 : this.maximumWorkHeightMeters.hashCode());
        result = prime * result + ((this.intrinsicWeightKilograms == null) ? 0 : this.intrinsicWeightKilograms.hashCode());
        result = prime * result + ((this.materialType == null) ? 0 : this.materialType.hashCode());
        result = prime * result + ((this.brand == null) ? 0 : this.brand.hashCode());
        result = prime * result + ((this.maximumPressureBars == null) ? 0 : this.maximumPressureBars.hashCode());
        result = prime * result + ((this.maximumHorsePower == null) ? 0 : this.maximumHorsePower.hashCode());
        result = prime * result + ((this.requiredPowerVoltageVolt == null) ? 0 : this.requiredPowerVoltageVolt.hashCode());
        result = prime * result + ((this.workWidthMeters == null) ? 0 : this.workWidthMeters.hashCode());
        result = prime * result + ((this.vacuumAttachmentPossible == null) ? 0 : this.vacuumAttachmentPossible.hashCode());
        result = prime * result + ((this.capacityLiters == null) ? 0 : this.capacityLiters.hashCode());
        result = prime * result + ((this.itemHeight == null) ? 0 : this.itemHeight.hashCode());
        result = prime * result + ((this.itemWidth == null) ? 0 : this.itemWidth.hashCode());
        result = prime * result + ((this.itemLength == null) ? 0 : this.itemLength.hashCode());
        result = prime * result + ((this.powerWatt == null) ? 0 : this.powerWatt.hashCode());
        result = prime * result + ((this.maximumSurfaceSquareMeters == null) ? 0 : this.maximumSurfaceSquareMeters.hashCode());
        result = prime * result + ((this.fuelType == null) ? 0 : this.fuelType.hashCode());
        result = prime * result + ((this.displayStatus == null) ? 0 : this.displayStatus.hashCode());
        result = prime * result + ((this.slug == null) ? 0 : this.slug.hashCode());
        result = prime * result + ((this.amount == null) ? 0 : this.amount.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("RentalItem (");

        sb.append(id);
        sb.append(", ").append(ownerId);
        sb.append(", ").append(name);
        sb.append(", ").append(externalReference);
        sb.append(", ").append(shortDescription);
        sb.append(", ").append(longDescription);
        sb.append(", ").append(price_24h);
        sb.append(", ").append(price_48h);
        sb.append(", ").append(price_168h);
        sb.append(", ").append(deliveryPossible);
        sb.append(", ").append(deliveryPrice);
        sb.append(", ").append(category);
        sb.append(", ").append(reachMeters);
        sb.append(", ").append(carryingWeightKilograms);
        sb.append(", ").append(maximumWorkHeightMeters);
        sb.append(", ").append(intrinsicWeightKilograms);
        sb.append(", ").append(materialType);
        sb.append(", ").append(brand);
        sb.append(", ").append(maximumPressureBars);
        sb.append(", ").append(maximumHorsePower);
        sb.append(", ").append(requiredPowerVoltageVolt);
        sb.append(", ").append(workWidthMeters);
        sb.append(", ").append(vacuumAttachmentPossible);
        sb.append(", ").append(capacityLiters);
        sb.append(", ").append(itemHeight);
        sb.append(", ").append(itemWidth);
        sb.append(", ").append(itemLength);
        sb.append(", ").append(powerWatt);
        sb.append(", ").append(maximumSurfaceSquareMeters);
        sb.append(", ").append(fuelType);
        sb.append(", ").append(displayStatus);
        sb.append(", ").append(slug);
        sb.append(", ").append(amount);

        sb.append(")");
        return sb.toString();
    }
}
