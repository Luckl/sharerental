/*
 * This file is generated by jOOQ.
 */
package nl.sharerental.be.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import nl.sharerental.be.jooq.generated.Keys;
import nl.sharerental.be.jooq.generated.Public;
import nl.sharerental.be.jooq.generated.tables.Lessor.LessorPath;
import nl.sharerental.be.jooq.generated.tables.records.LessorFinancialInformationRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LessorFinancialInformation extends TableImpl<LessorFinancialInformationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.lessor_financial_information</code>
     */
    public static final LessorFinancialInformation LESSOR_FINANCIAL_INFORMATION = new LessorFinancialInformation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LessorFinancialInformationRecord> getRecordType() {
        return LessorFinancialInformationRecord.class;
    }

    /**
     * The column <code>public.lessor_financial_information.lessor_id</code>.
     */
    public final TableField<LessorFinancialInformationRecord, Long> LESSOR_ID = createField(DSL.name("lessor_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>public.lessor_financial_information.chamber_of_commerce</code>.
     */
    public final TableField<LessorFinancialInformationRecord, String> CHAMBER_OF_COMMERCE = createField(DSL.name("chamber_of_commerce"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.lessor_financial_information.vat_id</code>.
     */
    public final TableField<LessorFinancialInformationRecord, String> VAT_ID = createField(DSL.name("vat_id"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>public.lessor_financial_information.invoice_email</code>.
     */
    public final TableField<LessorFinancialInformationRecord, String> INVOICE_EMAIL = createField(DSL.name("invoice_email"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.lessor_financial_information.iban</code>.
     */
    public final TableField<LessorFinancialInformationRecord, String> IBAN = createField(DSL.name("iban"), SQLDataType.CLOB, this, "");

    private LessorFinancialInformation(Name alias, Table<LessorFinancialInformationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private LessorFinancialInformation(Name alias, Table<LessorFinancialInformationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.lessor_financial_information</code> table
     * reference
     */
    public LessorFinancialInformation(String alias) {
        this(DSL.name(alias), LESSOR_FINANCIAL_INFORMATION);
    }

    /**
     * Create an aliased <code>public.lessor_financial_information</code> table
     * reference
     */
    public LessorFinancialInformation(Name alias) {
        this(alias, LESSOR_FINANCIAL_INFORMATION);
    }

    /**
     * Create a <code>public.lessor_financial_information</code> table reference
     */
    public LessorFinancialInformation() {
        this(DSL.name("lessor_financial_information"), null);
    }

    public <O extends Record> LessorFinancialInformation(Table<O> path, ForeignKey<O, LessorFinancialInformationRecord> childPath, InverseForeignKey<O, LessorFinancialInformationRecord> parentPath) {
        super(path, childPath, parentPath, LESSOR_FINANCIAL_INFORMATION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class LessorFinancialInformationPath extends LessorFinancialInformation implements Path<LessorFinancialInformationRecord> {
        public <O extends Record> LessorFinancialInformationPath(Table<O> path, ForeignKey<O, LessorFinancialInformationRecord> childPath, InverseForeignKey<O, LessorFinancialInformationRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private LessorFinancialInformationPath(Name alias, Table<LessorFinancialInformationRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public LessorFinancialInformationPath as(String alias) {
            return new LessorFinancialInformationPath(DSL.name(alias), this);
        }

        @Override
        public LessorFinancialInformationPath as(Name alias) {
            return new LessorFinancialInformationPath(alias, this);
        }

        @Override
        public LessorFinancialInformationPath as(Table<?> alias) {
            return new LessorFinancialInformationPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<LessorFinancialInformationRecord> getPrimaryKey() {
        return Keys.LESSOR_FINANCIAL_INFORMATION_PKEY;
    }

    @Override
    public List<ForeignKey<LessorFinancialInformationRecord, ?>> getReferences() {
        return Arrays.asList(Keys.LESSOR_FINANCIAL_INFORMATION__LESSOR_FINANCIAL_INFORMATION_LESSOR_ID_FKEY);
    }

    private transient LessorPath _lessor;

    /**
     * Get the implicit join path to the <code>public.lessor</code> table.
     */
    public LessorPath lessor() {
        if (_lessor == null)
            _lessor = new LessorPath(this, Keys.LESSOR_FINANCIAL_INFORMATION__LESSOR_FINANCIAL_INFORMATION_LESSOR_ID_FKEY, null);

        return _lessor;
    }

    @Override
    public LessorFinancialInformation as(String alias) {
        return new LessorFinancialInformation(DSL.name(alias), this);
    }

    @Override
    public LessorFinancialInformation as(Name alias) {
        return new LessorFinancialInformation(alias, this);
    }

    @Override
    public LessorFinancialInformation as(Table<?> alias) {
        return new LessorFinancialInformation(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public LessorFinancialInformation rename(String name) {
        return new LessorFinancialInformation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LessorFinancialInformation rename(Name name) {
        return new LessorFinancialInformation(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public LessorFinancialInformation rename(Table<?> name) {
        return new LessorFinancialInformation(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LessorFinancialInformation where(Condition condition) {
        return new LessorFinancialInformation(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LessorFinancialInformation where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LessorFinancialInformation where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LessorFinancialInformation where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LessorFinancialInformation where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LessorFinancialInformation where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LessorFinancialInformation where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LessorFinancialInformation where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LessorFinancialInformation whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LessorFinancialInformation whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
