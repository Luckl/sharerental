/*
 * This file is generated by jOOQ.
 */
package nl.sharerental.be.jooq.generated.tables;


import java.util.Collection;

import nl.sharerental.be.jooq.generated.Keys;
import nl.sharerental.be.jooq.generated.Public;
import nl.sharerental.be.jooq.generated.tables.records.ContactFormRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ContactForm extends TableImpl<ContactFormRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.contact_form</code>
     */
    public static final ContactForm CONTACT_FORM = new ContactForm();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ContactFormRecord> getRecordType() {
        return ContactFormRecord.class;
    }

    /**
     * The column <code>public.contact_form.id</code>.
     */
    public final TableField<ContactFormRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.contact_form.name</code>.
     */
    public final TableField<ContactFormRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.contact_form.email</code>.
     */
    public final TableField<ContactFormRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.contact_form.phone</code>.
     */
    public final TableField<ContactFormRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.contact_form.analytics_token</code>.
     */
    public final TableField<ContactFormRecord, String> ANALYTICS_TOKEN = createField(DSL.name("analytics_token"), SQLDataType.CLOB, this, "");

    private ContactForm(Name alias, Table<ContactFormRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ContactForm(Name alias, Table<ContactFormRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.contact_form</code> table reference
     */
    public ContactForm(String alias) {
        this(DSL.name(alias), CONTACT_FORM);
    }

    /**
     * Create an aliased <code>public.contact_form</code> table reference
     */
    public ContactForm(Name alias) {
        this(alias, CONTACT_FORM);
    }

    /**
     * Create a <code>public.contact_form</code> table reference
     */
    public ContactForm() {
        this(DSL.name("contact_form"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ContactFormRecord, Long> getIdentity() {
        return (Identity<ContactFormRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ContactFormRecord> getPrimaryKey() {
        return Keys.CONTACT_FORM_PKEY;
    }

    @Override
    public ContactForm as(String alias) {
        return new ContactForm(DSL.name(alias), this);
    }

    @Override
    public ContactForm as(Name alias) {
        return new ContactForm(alias, this);
    }

    @Override
    public ContactForm as(Table<?> alias) {
        return new ContactForm(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ContactForm rename(String name) {
        return new ContactForm(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ContactForm rename(Name name) {
        return new ContactForm(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ContactForm rename(Table<?> name) {
        return new ContactForm(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ContactForm where(Condition condition) {
        return new ContactForm(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ContactForm where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ContactForm where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ContactForm where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ContactForm where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ContactForm where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ContactForm where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ContactForm where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ContactForm whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ContactForm whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
