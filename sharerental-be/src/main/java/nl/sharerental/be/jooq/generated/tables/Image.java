/*
 * This file is generated by jOOQ.
 */
package nl.sharerental.be.jooq.generated.tables;


import java.util.Collection;

import nl.sharerental.be.jooq.generated.Keys;
import nl.sharerental.be.jooq.generated.Public;
import nl.sharerental.be.jooq.generated.tables.RentalItem.RentalItemPath;
import nl.sharerental.be.jooq.generated.tables.RentalItemImage.RentalItemImagePath;
import nl.sharerental.be.jooq.generated.tables.records.ImageRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Image extends TableImpl<ImageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.image</code>
     */
    public static final Image IMAGE = new Image();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ImageRecord> getRecordType() {
        return ImageRecord.class;
    }

    /**
     * The column <code>public.image.id</code>.
     */
    public final TableField<ImageRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.image.image_url</code>.
     */
    public final TableField<ImageRecord, String> IMAGE_URL = createField(DSL.name("image_url"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.image.image_id</code>.
     */
    public final TableField<ImageRecord, String> IMAGE_ID = createField(DSL.name("image_id"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field(DSL.raw("'UNDEFINED'::text"), SQLDataType.CLOB)), this, "");

    private Image(Name alias, Table<ImageRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Image(Name alias, Table<ImageRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.image</code> table reference
     */
    public Image(String alias) {
        this(DSL.name(alias), IMAGE);
    }

    /**
     * Create an aliased <code>public.image</code> table reference
     */
    public Image(Name alias) {
        this(alias, IMAGE);
    }

    /**
     * Create a <code>public.image</code> table reference
     */
    public Image() {
        this(DSL.name("image"), null);
    }

    public <O extends Record> Image(Table<O> path, ForeignKey<O, ImageRecord> childPath, InverseForeignKey<O, ImageRecord> parentPath) {
        super(path, childPath, parentPath, IMAGE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ImagePath extends Image implements Path<ImageRecord> {
        public <O extends Record> ImagePath(Table<O> path, ForeignKey<O, ImageRecord> childPath, InverseForeignKey<O, ImageRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ImagePath(Name alias, Table<ImageRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ImagePath as(String alias) {
            return new ImagePath(DSL.name(alias), this);
        }

        @Override
        public ImagePath as(Name alias) {
            return new ImagePath(alias, this);
        }

        @Override
        public ImagePath as(Table<?> alias) {
            return new ImagePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ImageRecord, Long> getIdentity() {
        return (Identity<ImageRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ImageRecord> getPrimaryKey() {
        return Keys.IMAGE_PKEY;
    }

    private transient RentalItemImagePath _rentalItemImage;

    /**
     * Get the implicit to-many join path to the
     * <code>public.rental_item_image</code> table
     */
    public RentalItemImagePath rentalItemImage() {
        if (_rentalItemImage == null)
            _rentalItemImage = new RentalItemImagePath(this, null, Keys.RENTAL_ITEM_IMAGE__RENTAL_ITEM_IMAGE_IMAGE_ID_FKEY.getInverseKey());

        return _rentalItemImage;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.rental_item</code> table
     */
    public RentalItemPath rentalItem() {
        return rentalItemImage().rentalItem();
    }

    @Override
    public Image as(String alias) {
        return new Image(DSL.name(alias), this);
    }

    @Override
    public Image as(Name alias) {
        return new Image(alias, this);
    }

    @Override
    public Image as(Table<?> alias) {
        return new Image(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Image rename(String name) {
        return new Image(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Image rename(Name name) {
        return new Image(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Image rename(Table<?> name) {
        return new Image(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Image where(Condition condition) {
        return new Image(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Image where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Image where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Image where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Image where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Image where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Image where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Image where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Image whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Image whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
