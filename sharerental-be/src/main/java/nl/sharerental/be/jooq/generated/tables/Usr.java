/*
 * This file is generated by jOOQ.
 */
package nl.sharerental.be.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import nl.sharerental.be.jooq.generated.Keys;
import nl.sharerental.be.jooq.generated.Public;
import nl.sharerental.be.jooq.generated.tables.Lessor.LessorPath;
import nl.sharerental.be.jooq.generated.tables.Renter.RenterPath;
import nl.sharerental.be.jooq.generated.tables.UserLessor.UserLessorPath;
import nl.sharerental.be.jooq.generated.tables.records.UsrRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Usr extends TableImpl<UsrRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.usr</code>
     */
    public static final Usr USR = new Usr();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsrRecord> getRecordType() {
        return UsrRecord.class;
    }

    /**
     * The column <code>public.usr.id</code>.
     */
    public final TableField<UsrRecord, String> ID = createField(DSL.name("id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.usr.email</code>.
     */
    public final TableField<UsrRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.usr.username</code>.
     */
    public final TableField<UsrRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.usr.renter_information</code>.
     */
    public final TableField<UsrRecord, Long> RENTER_INFORMATION = createField(DSL.name("renter_information"), SQLDataType.BIGINT, this, "");

    private Usr(Name alias, Table<UsrRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Usr(Name alias, Table<UsrRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.usr</code> table reference
     */
    public Usr(String alias) {
        this(DSL.name(alias), USR);
    }

    /**
     * Create an aliased <code>public.usr</code> table reference
     */
    public Usr(Name alias) {
        this(alias, USR);
    }

    /**
     * Create a <code>public.usr</code> table reference
     */
    public Usr() {
        this(DSL.name("usr"), null);
    }

    public <O extends Record> Usr(Table<O> path, ForeignKey<O, UsrRecord> childPath, InverseForeignKey<O, UsrRecord> parentPath) {
        super(path, childPath, parentPath, USR);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class UsrPath extends Usr implements Path<UsrRecord> {
        public <O extends Record> UsrPath(Table<O> path, ForeignKey<O, UsrRecord> childPath, InverseForeignKey<O, UsrRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private UsrPath(Name alias, Table<UsrRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public UsrPath as(String alias) {
            return new UsrPath(DSL.name(alias), this);
        }

        @Override
        public UsrPath as(Name alias) {
            return new UsrPath(alias, this);
        }

        @Override
        public UsrPath as(Table<?> alias) {
            return new UsrPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<UsrRecord> getPrimaryKey() {
        return Keys.USR_PKEY;
    }

    @Override
    public List<ForeignKey<UsrRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USR__USR_RENTER_INFORMATION_FKEY);
    }

    private transient RenterPath _renter;

    /**
     * Get the implicit join path to the <code>public.renter</code> table.
     */
    public RenterPath renter() {
        if (_renter == null)
            _renter = new RenterPath(this, Keys.USR__USR_RENTER_INFORMATION_FKEY, null);

        return _renter;
    }

    private transient UserLessorPath _userLessor;

    /**
     * Get the implicit to-many join path to the <code>public.user_lessor</code>
     * table
     */
    public UserLessorPath userLessor() {
        if (_userLessor == null)
            _userLessor = new UserLessorPath(this, null, Keys.USER_LESSOR__USER_LESSOR_USER_ID_FKEY.getInverseKey());

        return _userLessor;
    }

    /**
     * Get the implicit many-to-many join path to the <code>public.lessor</code>
     * table
     */
    public LessorPath lessor() {
        return userLessor().lessor();
    }

    @Override
    public Usr as(String alias) {
        return new Usr(DSL.name(alias), this);
    }

    @Override
    public Usr as(Name alias) {
        return new Usr(alias, this);
    }

    @Override
    public Usr as(Table<?> alias) {
        return new Usr(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Usr rename(String name) {
        return new Usr(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Usr rename(Name name) {
        return new Usr(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Usr rename(Table<?> name) {
        return new Usr(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Usr where(Condition condition) {
        return new Usr(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Usr where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Usr where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Usr where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Usr where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Usr where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Usr where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Usr where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Usr whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Usr whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
