/*
 * This file is generated by jOOQ.
 */
package nl.sharerental.be.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import nl.sharerental.be.jooq.generated.Keys;
import nl.sharerental.be.jooq.generated.Public;
import nl.sharerental.be.jooq.generated.enums.LessorStatus;
import nl.sharerental.be.jooq.generated.tables.LessorFinancialInformation.LessorFinancialInformationPath;
import nl.sharerental.be.jooq.generated.tables.LessorLocation.LessorLocationPath;
import nl.sharerental.be.jooq.generated.tables.Location.LocationPath;
import nl.sharerental.be.jooq.generated.tables.RentalItem.RentalItemPath;
import nl.sharerental.be.jooq.generated.tables.UserLessor.UserLessorPath;
import nl.sharerental.be.jooq.generated.tables.Usr.UsrPath;
import nl.sharerental.be.jooq.generated.tables.records.LessorRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Lessor extends TableImpl<LessorRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.lessor</code>
     */
    public static final Lessor LESSOR = new Lessor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LessorRecord> getRecordType() {
        return LessorRecord.class;
    }

    /**
     * The column <code>public.lessor.id</code>.
     */
    public final TableField<LessorRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.lessor.name</code>.
     */
    public final TableField<LessorRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.lessor.description</code>.
     */
    public final TableField<LessorRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.lessor.phone_number</code>.
     */
    public final TableField<LessorRecord, String> PHONE_NUMBER = createField(DSL.name("phone_number"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.lessor.primary_location</code>.
     */
    public final TableField<LessorRecord, Long> PRIMARY_LOCATION = createField(DSL.name("primary_location"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.lessor.status</code>.
     */
    public final TableField<LessorRecord, LessorStatus> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field(DSL.raw("'ACTIVE'::lessor_status"), SQLDataType.VARCHAR)).asEnumDataType(LessorStatus.class), this, "");

    private Lessor(Name alias, Table<LessorRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Lessor(Name alias, Table<LessorRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.lessor</code> table reference
     */
    public Lessor(String alias) {
        this(DSL.name(alias), LESSOR);
    }

    /**
     * Create an aliased <code>public.lessor</code> table reference
     */
    public Lessor(Name alias) {
        this(alias, LESSOR);
    }

    /**
     * Create a <code>public.lessor</code> table reference
     */
    public Lessor() {
        this(DSL.name("lessor"), null);
    }

    public <O extends Record> Lessor(Table<O> path, ForeignKey<O, LessorRecord> childPath, InverseForeignKey<O, LessorRecord> parentPath) {
        super(path, childPath, parentPath, LESSOR);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class LessorPath extends Lessor implements Path<LessorRecord> {
        public <O extends Record> LessorPath(Table<O> path, ForeignKey<O, LessorRecord> childPath, InverseForeignKey<O, LessorRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private LessorPath(Name alias, Table<LessorRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public LessorPath as(String alias) {
            return new LessorPath(DSL.name(alias), this);
        }

        @Override
        public LessorPath as(Name alias) {
            return new LessorPath(alias, this);
        }

        @Override
        public LessorPath as(Table<?> alias) {
            return new LessorPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<LessorRecord, Long> getIdentity() {
        return (Identity<LessorRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<LessorRecord> getPrimaryKey() {
        return Keys.LESSOR_PKEY;
    }

    @Override
    public List<ForeignKey<LessorRecord, ?>> getReferences() {
        return Arrays.asList(Keys.LESSOR__LESSOR_PRIMARY_LOCATION_FKEY);
    }

    private transient LocationPath _location;

    /**
     * Get the implicit join path to the <code>public.location</code> table.
     */
    public LocationPath location() {
        if (_location == null)
            _location = new LocationPath(this, Keys.LESSOR__LESSOR_PRIMARY_LOCATION_FKEY, null);

        return _location;
    }

    private transient LessorFinancialInformationPath _lessorFinancialInformation;

    /**
     * Get the implicit to-many join path to the
     * <code>public.lessor_financial_information</code> table
     */
    public LessorFinancialInformationPath lessorFinancialInformation() {
        if (_lessorFinancialInformation == null)
            _lessorFinancialInformation = new LessorFinancialInformationPath(this, null, Keys.LESSOR_FINANCIAL_INFORMATION__LESSOR_FINANCIAL_INFORMATION_LESSOR_ID_FKEY.getInverseKey());

        return _lessorFinancialInformation;
    }

    private transient LessorLocationPath _lessorLocation;

    /**
     * Get the implicit to-many join path to the
     * <code>public.lessor_location</code> table
     */
    public LessorLocationPath lessorLocation() {
        if (_lessorLocation == null)
            _lessorLocation = new LessorLocationPath(this, null, Keys.LESSOR_LOCATION__LESSOR_LOCATION_LESSOR_ID_FKEY.getInverseKey());

        return _lessorLocation;
    }

    private transient RentalItemPath _rentalItem;

    /**
     * Get the implicit to-many join path to the <code>public.rental_item</code>
     * table
     */
    public RentalItemPath rentalItem() {
        if (_rentalItem == null)
            _rentalItem = new RentalItemPath(this, null, Keys.RENTAL_ITEM__RENTAL_ITEM_OWNER_ID_FKEY.getInverseKey());

        return _rentalItem;
    }

    private transient UserLessorPath _userLessor;

    /**
     * Get the implicit to-many join path to the <code>public.user_lessor</code>
     * table
     */
    public UserLessorPath userLessor() {
        if (_userLessor == null)
            _userLessor = new UserLessorPath(this, null, Keys.USER_LESSOR__USER_LESSOR_LESSOR_ID_FKEY.getInverseKey());

        return _userLessor;
    }

    /**
     * Get the implicit many-to-many join path to the <code>public.usr</code>
     * table
     */
    public UsrPath usr() {
        return userLessor().usr();
    }

    @Override
    public Lessor as(String alias) {
        return new Lessor(DSL.name(alias), this);
    }

    @Override
    public Lessor as(Name alias) {
        return new Lessor(alias, this);
    }

    @Override
    public Lessor as(Table<?> alias) {
        return new Lessor(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Lessor rename(String name) {
        return new Lessor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Lessor rename(Name name) {
        return new Lessor(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Lessor rename(Table<?> name) {
        return new Lessor(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lessor where(Condition condition) {
        return new Lessor(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lessor where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lessor where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lessor where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Lessor where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Lessor where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Lessor where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Lessor where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lessor whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Lessor whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
