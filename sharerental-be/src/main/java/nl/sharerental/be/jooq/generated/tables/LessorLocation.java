/*
 * This file is generated by jOOQ.
 */
package nl.sharerental.be.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import nl.sharerental.be.jooq.generated.Keys;
import nl.sharerental.be.jooq.generated.Public;
import nl.sharerental.be.jooq.generated.tables.Lessor.LessorPath;
import nl.sharerental.be.jooq.generated.tables.Location.LocationPath;
import nl.sharerental.be.jooq.generated.tables.records.LessorLocationRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LessorLocation extends TableImpl<LessorLocationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.lessor_location</code>
     */
    public static final LessorLocation LESSOR_LOCATION = new LessorLocation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LessorLocationRecord> getRecordType() {
        return LessorLocationRecord.class;
    }

    /**
     * The column <code>public.lessor_location.lessor_id</code>.
     */
    public final TableField<LessorLocationRecord, Long> LESSOR_ID = createField(DSL.name("lessor_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.lessor_location.location_id</code>.
     */
    public final TableField<LessorLocationRecord, Long> LOCATION_ID = createField(DSL.name("location_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private LessorLocation(Name alias, Table<LessorLocationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private LessorLocation(Name alias, Table<LessorLocationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.lessor_location</code> table reference
     */
    public LessorLocation(String alias) {
        this(DSL.name(alias), LESSOR_LOCATION);
    }

    /**
     * Create an aliased <code>public.lessor_location</code> table reference
     */
    public LessorLocation(Name alias) {
        this(alias, LESSOR_LOCATION);
    }

    /**
     * Create a <code>public.lessor_location</code> table reference
     */
    public LessorLocation() {
        this(DSL.name("lessor_location"), null);
    }

    public <O extends Record> LessorLocation(Table<O> path, ForeignKey<O, LessorLocationRecord> childPath, InverseForeignKey<O, LessorLocationRecord> parentPath) {
        super(path, childPath, parentPath, LESSOR_LOCATION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class LessorLocationPath extends LessorLocation implements Path<LessorLocationRecord> {
        public <O extends Record> LessorLocationPath(Table<O> path, ForeignKey<O, LessorLocationRecord> childPath, InverseForeignKey<O, LessorLocationRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private LessorLocationPath(Name alias, Table<LessorLocationRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public LessorLocationPath as(String alias) {
            return new LessorLocationPath(DSL.name(alias), this);
        }

        @Override
        public LessorLocationPath as(Name alias) {
            return new LessorLocationPath(alias, this);
        }

        @Override
        public LessorLocationPath as(Table<?> alias) {
            return new LessorLocationPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<LessorLocationRecord> getPrimaryKey() {
        return Keys.LESSOR_LOCATION_PKEY;
    }

    @Override
    public List<ForeignKey<LessorLocationRecord, ?>> getReferences() {
        return Arrays.asList(Keys.LESSOR_LOCATION__LESSOR_LOCATION_LESSOR_ID_FKEY, Keys.LESSOR_LOCATION__LESSOR_LOCATION_LOCATION_ID_FKEY);
    }

    private transient LessorPath _lessor;

    /**
     * Get the implicit join path to the <code>public.lessor</code> table.
     */
    public LessorPath lessor() {
        if (_lessor == null)
            _lessor = new LessorPath(this, Keys.LESSOR_LOCATION__LESSOR_LOCATION_LESSOR_ID_FKEY, null);

        return _lessor;
    }

    private transient LocationPath _location;

    /**
     * Get the implicit join path to the <code>public.location</code> table.
     */
    public LocationPath location() {
        if (_location == null)
            _location = new LocationPath(this, Keys.LESSOR_LOCATION__LESSOR_LOCATION_LOCATION_ID_FKEY, null);

        return _location;
    }

    @Override
    public LessorLocation as(String alias) {
        return new LessorLocation(DSL.name(alias), this);
    }

    @Override
    public LessorLocation as(Name alias) {
        return new LessorLocation(alias, this);
    }

    @Override
    public LessorLocation as(Table<?> alias) {
        return new LessorLocation(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public LessorLocation rename(String name) {
        return new LessorLocation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LessorLocation rename(Name name) {
        return new LessorLocation(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public LessorLocation rename(Table<?> name) {
        return new LessorLocation(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LessorLocation where(Condition condition) {
        return new LessorLocation(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LessorLocation where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LessorLocation where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LessorLocation where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LessorLocation where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LessorLocation where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LessorLocation where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LessorLocation where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LessorLocation whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LessorLocation whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
