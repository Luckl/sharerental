/*
 * This file is generated by jOOQ.
 */
package nl.sharerental.be.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import nl.sharerental.be.jooq.generated.Keys;
import nl.sharerental.be.jooq.generated.Public;
import nl.sharerental.be.jooq.generated.enums.TransactionStatusEnum;
import nl.sharerental.be.jooq.generated.tables.Transaction.TransactionPath;
import nl.sharerental.be.jooq.generated.tables.records.TransactionStatusRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TransactionStatus extends TableImpl<TransactionStatusRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.transaction_status</code>
     */
    public static final TransactionStatus TRANSACTION_STATUS = new TransactionStatus();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransactionStatusRecord> getRecordType() {
        return TransactionStatusRecord.class;
    }

    /**
     * The column <code>public.transaction_status.id</code>.
     */
    public final TableField<TransactionStatusRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.transaction_status.created_timestamp</code>.
     */
    public final TableField<TransactionStatusRecord, LocalDateTime> CREATED_TIMESTAMP = createField(DSL.name("created_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.transaction_status.notes</code>.
     */
    public final TableField<TransactionStatusRecord, String> NOTES = createField(DSL.name("notes"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.transaction_status.status</code>.
     */
    public final TableField<TransactionStatusRecord, TransactionStatusEnum> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field(DSL.raw("'INITIALIZED'::transaction_status_enum"), SQLDataType.VARCHAR)).asEnumDataType(TransactionStatusEnum.class), this, "");

    /**
     * The column <code>public.transaction_status.transaction_id</code>.
     */
    public final TableField<TransactionStatusRecord, Long> TRANSACTION_ID = createField(DSL.name("transaction_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BIGINT)), this, "");

    private TransactionStatus(Name alias, Table<TransactionStatusRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TransactionStatus(Name alias, Table<TransactionStatusRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.transaction_status</code> table reference
     */
    public TransactionStatus(String alias) {
        this(DSL.name(alias), TRANSACTION_STATUS);
    }

    /**
     * Create an aliased <code>public.transaction_status</code> table reference
     */
    public TransactionStatus(Name alias) {
        this(alias, TRANSACTION_STATUS);
    }

    /**
     * Create a <code>public.transaction_status</code> table reference
     */
    public TransactionStatus() {
        this(DSL.name("transaction_status"), null);
    }

    public <O extends Record> TransactionStatus(Table<O> path, ForeignKey<O, TransactionStatusRecord> childPath, InverseForeignKey<O, TransactionStatusRecord> parentPath) {
        super(path, childPath, parentPath, TRANSACTION_STATUS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TransactionStatusPath extends TransactionStatus implements Path<TransactionStatusRecord> {
        public <O extends Record> TransactionStatusPath(Table<O> path, ForeignKey<O, TransactionStatusRecord> childPath, InverseForeignKey<O, TransactionStatusRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TransactionStatusPath(Name alias, Table<TransactionStatusRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TransactionStatusPath as(String alias) {
            return new TransactionStatusPath(DSL.name(alias), this);
        }

        @Override
        public TransactionStatusPath as(Name alias) {
            return new TransactionStatusPath(alias, this);
        }

        @Override
        public TransactionStatusPath as(Table<?> alias) {
            return new TransactionStatusPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<TransactionStatusRecord, Long> getIdentity() {
        return (Identity<TransactionStatusRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TransactionStatusRecord> getPrimaryKey() {
        return Keys.TRANSACTION_STATUS_PKEY;
    }

    @Override
    public List<ForeignKey<TransactionStatusRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TRANSACTION_STATUS__TRANSACTION_STATUS_TRANSACTION_ID_FKEY);
    }

    private transient TransactionPath _transaction;

    /**
     * Get the implicit join path to the <code>public.transaction</code> table.
     */
    public TransactionPath transaction() {
        if (_transaction == null)
            _transaction = new TransactionPath(this, Keys.TRANSACTION_STATUS__TRANSACTION_STATUS_TRANSACTION_ID_FKEY, null);

        return _transaction;
    }

    @Override
    public TransactionStatus as(String alias) {
        return new TransactionStatus(DSL.name(alias), this);
    }

    @Override
    public TransactionStatus as(Name alias) {
        return new TransactionStatus(alias, this);
    }

    @Override
    public TransactionStatus as(Table<?> alias) {
        return new TransactionStatus(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionStatus rename(String name) {
        return new TransactionStatus(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionStatus rename(Name name) {
        return new TransactionStatus(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionStatus rename(Table<?> name) {
        return new TransactionStatus(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TransactionStatus where(Condition condition) {
        return new TransactionStatus(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TransactionStatus where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TransactionStatus where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TransactionStatus where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TransactionStatus where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TransactionStatus where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TransactionStatus where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TransactionStatus where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TransactionStatus whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TransactionStatus whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
