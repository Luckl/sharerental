/*
 * This file is generated by jOOQ.
 */
package nl.sharerental.be.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import nl.sharerental.be.jooq.generated.Keys;
import nl.sharerental.be.jooq.generated.Public;
import nl.sharerental.be.jooq.generated.tables.Lessor.LessorPath;
import nl.sharerental.be.jooq.generated.tables.Usr.UsrPath;
import nl.sharerental.be.jooq.generated.tables.records.UserLessorRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserLessor extends TableImpl<UserLessorRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_lessor</code>
     */
    public static final UserLessor USER_LESSOR = new UserLessor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserLessorRecord> getRecordType() {
        return UserLessorRecord.class;
    }

    /**
     * The column <code>public.user_lessor.user_id</code>.
     */
    public final TableField<UserLessorRecord, String> USER_ID = createField(DSL.name("user_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.user_lessor.lessor_id</code>.
     */
    public final TableField<UserLessorRecord, Long> LESSOR_ID = createField(DSL.name("lessor_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.user_lessor.role</code>.
     */
    public final TableField<UserLessorRecord, String> ROLE = createField(DSL.name("role"), SQLDataType.CLOB, this, "");

    private UserLessor(Name alias, Table<UserLessorRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private UserLessor(Name alias, Table<UserLessorRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.user_lessor</code> table reference
     */
    public UserLessor(String alias) {
        this(DSL.name(alias), USER_LESSOR);
    }

    /**
     * Create an aliased <code>public.user_lessor</code> table reference
     */
    public UserLessor(Name alias) {
        this(alias, USER_LESSOR);
    }

    /**
     * Create a <code>public.user_lessor</code> table reference
     */
    public UserLessor() {
        this(DSL.name("user_lessor"), null);
    }

    public <O extends Record> UserLessor(Table<O> path, ForeignKey<O, UserLessorRecord> childPath, InverseForeignKey<O, UserLessorRecord> parentPath) {
        super(path, childPath, parentPath, USER_LESSOR);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class UserLessorPath extends UserLessor implements Path<UserLessorRecord> {
        public <O extends Record> UserLessorPath(Table<O> path, ForeignKey<O, UserLessorRecord> childPath, InverseForeignKey<O, UserLessorRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private UserLessorPath(Name alias, Table<UserLessorRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public UserLessorPath as(String alias) {
            return new UserLessorPath(DSL.name(alias), this);
        }

        @Override
        public UserLessorPath as(Name alias) {
            return new UserLessorPath(alias, this);
        }

        @Override
        public UserLessorPath as(Table<?> alias) {
            return new UserLessorPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<UserLessorRecord> getPrimaryKey() {
        return Keys.USER_LESSOR_PKEY;
    }

    @Override
    public List<ForeignKey<UserLessorRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_LESSOR__USER_LESSOR_USER_ID_FKEY, Keys.USER_LESSOR__USER_LESSOR_LESSOR_ID_FKEY);
    }

    private transient UsrPath _usr;

    /**
     * Get the implicit join path to the <code>public.usr</code> table.
     */
    public UsrPath usr() {
        if (_usr == null)
            _usr = new UsrPath(this, Keys.USER_LESSOR__USER_LESSOR_USER_ID_FKEY, null);

        return _usr;
    }

    private transient LessorPath _lessor;

    /**
     * Get the implicit join path to the <code>public.lessor</code> table.
     */
    public LessorPath lessor() {
        if (_lessor == null)
            _lessor = new LessorPath(this, Keys.USER_LESSOR__USER_LESSOR_LESSOR_ID_FKEY, null);

        return _lessor;
    }

    @Override
    public UserLessor as(String alias) {
        return new UserLessor(DSL.name(alias), this);
    }

    @Override
    public UserLessor as(Name alias) {
        return new UserLessor(alias, this);
    }

    @Override
    public UserLessor as(Table<?> alias) {
        return new UserLessor(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserLessor rename(String name) {
        return new UserLessor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserLessor rename(Name name) {
        return new UserLessor(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserLessor rename(Table<?> name) {
        return new UserLessor(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserLessor where(Condition condition) {
        return new UserLessor(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserLessor where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserLessor where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserLessor where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserLessor where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserLessor where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserLessor where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserLessor where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserLessor whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserLessor whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
