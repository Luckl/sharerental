/*
 * This file is generated by jOOQ.
 */
package nl.sharerental.be.jooq.generated;


import nl.sharerental.be.jooq.generated.tables.ContactForm;
import nl.sharerental.be.jooq.generated.tables.FlywaySchemaHistory;
import nl.sharerental.be.jooq.generated.tables.Image;
import nl.sharerental.be.jooq.generated.tables.Lessor;
import nl.sharerental.be.jooq.generated.tables.LessorFinancialInformation;
import nl.sharerental.be.jooq.generated.tables.LessorLocation;
import nl.sharerental.be.jooq.generated.tables.Location;
import nl.sharerental.be.jooq.generated.tables.RentalItem;
import nl.sharerental.be.jooq.generated.tables.RentalItemImage;
import nl.sharerental.be.jooq.generated.tables.Renter;
import nl.sharerental.be.jooq.generated.tables.Transaction;
import nl.sharerental.be.jooq.generated.tables.TransactionStatus;
import nl.sharerental.be.jooq.generated.tables.UserLessor;
import nl.sharerental.be.jooq.generated.tables.Usr;
import nl.sharerental.be.jooq.generated.tables.records.ContactFormRecord;
import nl.sharerental.be.jooq.generated.tables.records.FlywaySchemaHistoryRecord;
import nl.sharerental.be.jooq.generated.tables.records.ImageRecord;
import nl.sharerental.be.jooq.generated.tables.records.LessorFinancialInformationRecord;
import nl.sharerental.be.jooq.generated.tables.records.LessorLocationRecord;
import nl.sharerental.be.jooq.generated.tables.records.LessorRecord;
import nl.sharerental.be.jooq.generated.tables.records.LocationRecord;
import nl.sharerental.be.jooq.generated.tables.records.RentalItemImageRecord;
import nl.sharerental.be.jooq.generated.tables.records.RentalItemRecord;
import nl.sharerental.be.jooq.generated.tables.records.RenterRecord;
import nl.sharerental.be.jooq.generated.tables.records.TransactionRecord;
import nl.sharerental.be.jooq.generated.tables.records.TransactionStatusRecord;
import nl.sharerental.be.jooq.generated.tables.records.UserLessorRecord;
import nl.sharerental.be.jooq.generated.tables.records.UsrRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ContactFormRecord> CONTACT_FORM_PKEY = Internal.createUniqueKey(ContactForm.CONTACT_FORM, DSL.name("contact_form_pkey"), new TableField[] { ContactForm.CONTACT_FORM.ID }, true);
    public static final UniqueKey<FlywaySchemaHistoryRecord> FLYWAY_SCHEMA_HISTORY_PK = Internal.createUniqueKey(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, DSL.name("flyway_schema_history_pk"), new TableField[] { FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK }, true);
    public static final UniqueKey<ImageRecord> IMAGE_PKEY = Internal.createUniqueKey(Image.IMAGE, DSL.name("image_pkey"), new TableField[] { Image.IMAGE.ID }, true);
    public static final UniqueKey<LessorRecord> LESSOR_PKEY = Internal.createUniqueKey(Lessor.LESSOR, DSL.name("lessor_pkey"), new TableField[] { Lessor.LESSOR.ID }, true);
    public static final UniqueKey<LessorFinancialInformationRecord> LESSOR_FINANCIAL_INFORMATION_PKEY = Internal.createUniqueKey(LessorFinancialInformation.LESSOR_FINANCIAL_INFORMATION, DSL.name("lessor_financial_information_pkey"), new TableField[] { LessorFinancialInformation.LESSOR_FINANCIAL_INFORMATION.LESSOR_ID }, true);
    public static final UniqueKey<LessorLocationRecord> LESSOR_LOCATION_PKEY = Internal.createUniqueKey(LessorLocation.LESSOR_LOCATION, DSL.name("lessor_location_pkey"), new TableField[] { LessorLocation.LESSOR_LOCATION.LESSOR_ID, LessorLocation.LESSOR_LOCATION.LOCATION_ID }, true);
    public static final UniqueKey<LocationRecord> LOCATION_PKEY = Internal.createUniqueKey(Location.LOCATION, DSL.name("location_pkey"), new TableField[] { Location.LOCATION.ID }, true);
    public static final UniqueKey<RentalItemRecord> RENTAL_ITEM_PKEY = Internal.createUniqueKey(RentalItem.RENTAL_ITEM, DSL.name("rental_item_pkey"), new TableField[] { RentalItem.RENTAL_ITEM.ID }, true);
    public static final UniqueKey<RentalItemRecord> RENTAL_ITEM_SLUG_KEY = Internal.createUniqueKey(RentalItem.RENTAL_ITEM, DSL.name("rental_item_slug_key"), new TableField[] { RentalItem.RENTAL_ITEM.SLUG }, true);
    public static final UniqueKey<RentalItemImageRecord> RENTAL_ITEM_IMAGE_PKEY = Internal.createUniqueKey(RentalItemImage.RENTAL_ITEM_IMAGE, DSL.name("rental_item_image_pkey"), new TableField[] { RentalItemImage.RENTAL_ITEM_IMAGE.RENTAL_ITEM_ID, RentalItemImage.RENTAL_ITEM_IMAGE.IMAGE_ID }, true);
    public static final UniqueKey<RenterRecord> RENTER_PKEY = Internal.createUniqueKey(Renter.RENTER, DSL.name("renter_pkey"), new TableField[] { Renter.RENTER.ID }, true);
    public static final UniqueKey<TransactionRecord> TRANSACTION_PKEY = Internal.createUniqueKey(Transaction.TRANSACTION, DSL.name("transaction_pkey"), new TableField[] { Transaction.TRANSACTION.ID }, true);
    public static final UniqueKey<TransactionStatusRecord> TRANSACTION_STATUS_PKEY = Internal.createUniqueKey(TransactionStatus.TRANSACTION_STATUS, DSL.name("transaction_status_pkey"), new TableField[] { TransactionStatus.TRANSACTION_STATUS.ID }, true);
    public static final UniqueKey<UserLessorRecord> USER_LESSOR_PKEY = Internal.createUniqueKey(UserLessor.USER_LESSOR, DSL.name("user_lessor_pkey"), new TableField[] { UserLessor.USER_LESSOR.USER_ID, UserLessor.USER_LESSOR.LESSOR_ID }, true);
    public static final UniqueKey<UsrRecord> USR_PKEY = Internal.createUniqueKey(Usr.USR, DSL.name("usr_pkey"), new TableField[] { Usr.USR.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<LessorRecord, LocationRecord> LESSOR__LESSOR_PRIMARY_LOCATION_FKEY = Internal.createForeignKey(Lessor.LESSOR, DSL.name("lessor_primary_location_fkey"), new TableField[] { Lessor.LESSOR.PRIMARY_LOCATION }, Keys.LOCATION_PKEY, new TableField[] { Location.LOCATION.ID }, true);
    public static final ForeignKey<LessorFinancialInformationRecord, LessorRecord> LESSOR_FINANCIAL_INFORMATION__LESSOR_FINANCIAL_INFORMATION_LESSOR_ID_FKEY = Internal.createForeignKey(LessorFinancialInformation.LESSOR_FINANCIAL_INFORMATION, DSL.name("lessor_financial_information_lessor_id_fkey"), new TableField[] { LessorFinancialInformation.LESSOR_FINANCIAL_INFORMATION.LESSOR_ID }, Keys.LESSOR_PKEY, new TableField[] { Lessor.LESSOR.ID }, true);
    public static final ForeignKey<LessorLocationRecord, LessorRecord> LESSOR_LOCATION__LESSOR_LOCATION_LESSOR_ID_FKEY = Internal.createForeignKey(LessorLocation.LESSOR_LOCATION, DSL.name("lessor_location_lessor_id_fkey"), new TableField[] { LessorLocation.LESSOR_LOCATION.LESSOR_ID }, Keys.LESSOR_PKEY, new TableField[] { Lessor.LESSOR.ID }, true);
    public static final ForeignKey<LessorLocationRecord, LocationRecord> LESSOR_LOCATION__LESSOR_LOCATION_LOCATION_ID_FKEY = Internal.createForeignKey(LessorLocation.LESSOR_LOCATION, DSL.name("lessor_location_location_id_fkey"), new TableField[] { LessorLocation.LESSOR_LOCATION.LOCATION_ID }, Keys.LOCATION_PKEY, new TableField[] { Location.LOCATION.ID }, true);
    public static final ForeignKey<RentalItemRecord, LessorRecord> RENTAL_ITEM__RENTAL_ITEM_OWNER_ID_FKEY = Internal.createForeignKey(RentalItem.RENTAL_ITEM, DSL.name("rental_item_owner_id_fkey"), new TableField[] { RentalItem.RENTAL_ITEM.OWNER_ID }, Keys.LESSOR_PKEY, new TableField[] { Lessor.LESSOR.ID }, true);
    public static final ForeignKey<RentalItemImageRecord, ImageRecord> RENTAL_ITEM_IMAGE__RENTAL_ITEM_IMAGE_IMAGE_ID_FKEY = Internal.createForeignKey(RentalItemImage.RENTAL_ITEM_IMAGE, DSL.name("rental_item_image_image_id_fkey"), new TableField[] { RentalItemImage.RENTAL_ITEM_IMAGE.IMAGE_ID }, Keys.IMAGE_PKEY, new TableField[] { Image.IMAGE.ID }, true);
    public static final ForeignKey<RentalItemImageRecord, RentalItemRecord> RENTAL_ITEM_IMAGE__RENTAL_ITEM_IMAGE_RENTAL_ITEM_ID_FKEY = Internal.createForeignKey(RentalItemImage.RENTAL_ITEM_IMAGE, DSL.name("rental_item_image_rental_item_id_fkey"), new TableField[] { RentalItemImage.RENTAL_ITEM_IMAGE.RENTAL_ITEM_ID }, Keys.RENTAL_ITEM_PKEY, new TableField[] { RentalItem.RENTAL_ITEM.ID }, true);
    public static final ForeignKey<RenterRecord, UsrRecord> RENTER__RENTER_ENTERED_BY_USER_FKEY = Internal.createForeignKey(Renter.RENTER, DSL.name("renter_entered_by_user_fkey"), new TableField[] { Renter.RENTER.ENTERED_BY_USER }, Keys.USR_PKEY, new TableField[] { Usr.USR.ID }, true);
    public static final ForeignKey<RenterRecord, LocationRecord> RENTER__RENTER_LOCATION_FKEY = Internal.createForeignKey(Renter.RENTER, DSL.name("renter_location_fkey"), new TableField[] { Renter.RENTER.LOCATION_ID }, Keys.LOCATION_PKEY, new TableField[] { Location.LOCATION.ID }, true);
    public static final ForeignKey<TransactionRecord, TransactionStatusRecord> TRANSACTION__TRANSACTION_CURRENT_STATUS_ID_FKEY = Internal.createForeignKey(Transaction.TRANSACTION, DSL.name("transaction_current_status_id_fkey"), new TableField[] { Transaction.TRANSACTION.CURRENT_STATUS_ID }, Keys.TRANSACTION_STATUS_PKEY, new TableField[] { TransactionStatus.TRANSACTION_STATUS.ID }, true);
    public static final ForeignKey<TransactionRecord, RentalItemRecord> TRANSACTION__TRANSACTION_RENTAL_ITEM_ID_FKEY = Internal.createForeignKey(Transaction.TRANSACTION, DSL.name("transaction_rental_item_id_fkey"), new TableField[] { Transaction.TRANSACTION.RENTAL_ITEM_ID }, Keys.RENTAL_ITEM_PKEY, new TableField[] { RentalItem.RENTAL_ITEM.ID }, true);
    public static final ForeignKey<TransactionRecord, RenterRecord> TRANSACTION__TRANSACTION_RENTER_INFORMATION_FKEY = Internal.createForeignKey(Transaction.TRANSACTION, DSL.name("transaction_renter_information_fkey"), new TableField[] { Transaction.TRANSACTION.RENTER_ID }, Keys.RENTER_PKEY, new TableField[] { Renter.RENTER.ID }, true);
    public static final ForeignKey<TransactionStatusRecord, TransactionRecord> TRANSACTION_STATUS__TRANSACTION_STATUS_TRANSACTION_ID_FKEY = Internal.createForeignKey(TransactionStatus.TRANSACTION_STATUS, DSL.name("transaction_status_transaction_id_fkey"), new TableField[] { TransactionStatus.TRANSACTION_STATUS.TRANSACTION_ID }, Keys.TRANSACTION_PKEY, new TableField[] { Transaction.TRANSACTION.ID }, true);
    public static final ForeignKey<UserLessorRecord, LessorRecord> USER_LESSOR__USER_LESSOR_LESSOR_ID_FKEY = Internal.createForeignKey(UserLessor.USER_LESSOR, DSL.name("user_lessor_lessor_id_fkey"), new TableField[] { UserLessor.USER_LESSOR.LESSOR_ID }, Keys.LESSOR_PKEY, new TableField[] { Lessor.LESSOR.ID }, true);
    public static final ForeignKey<UserLessorRecord, UsrRecord> USER_LESSOR__USER_LESSOR_USER_ID_FKEY = Internal.createForeignKey(UserLessor.USER_LESSOR, DSL.name("user_lessor_user_id_fkey"), new TableField[] { UserLessor.USER_LESSOR.USER_ID }, Keys.USR_PKEY, new TableField[] { Usr.USR.ID }, true);
    public static final ForeignKey<UsrRecord, RenterRecord> USR__USR_RENTER_INFORMATION_FKEY = Internal.createForeignKey(Usr.USR, DSL.name("usr_renter_information_fkey"), new TableField[] { Usr.USR.RENTER_INFORMATION }, Keys.RENTER_PKEY, new TableField[] { Renter.RENTER.ID }, true);
}
