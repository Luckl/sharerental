/*
 * This file is generated by jOOQ.
 */
package nl.sharerental.be.jooq.generated.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import nl.sharerental.be.jooq.generated.Keys;
import nl.sharerental.be.jooq.generated.Public;
import nl.sharerental.be.jooq.generated.enums.FuelTypeEnum;
import nl.sharerental.be.jooq.generated.enums.RentalItemDisplayStatus;
import nl.sharerental.be.jooq.generated.tables.Image.ImagePath;
import nl.sharerental.be.jooq.generated.tables.Lessor.LessorPath;
import nl.sharerental.be.jooq.generated.tables.RentalItemImage.RentalItemImagePath;
import nl.sharerental.be.jooq.generated.tables.Transaction.TransactionPath;
import nl.sharerental.be.jooq.generated.tables.records.RentalItemRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RentalItem extends TableImpl<RentalItemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.rental_item</code>
     */
    public static final RentalItem RENTAL_ITEM = new RentalItem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RentalItemRecord> getRecordType() {
        return RentalItemRecord.class;
    }

    /**
     * The column <code>public.rental_item.id</code>.
     */
    public final TableField<RentalItemRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.rental_item.owner_id</code>.
     */
    public final TableField<RentalItemRecord, Long> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.rental_item.name</code>.
     */
    public final TableField<RentalItemRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.rental_item.external_reference</code>.
     */
    public final TableField<RentalItemRecord, String> EXTERNAL_REFERENCE = createField(DSL.name("external_reference"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.rental_item.short_description</code>.
     */
    public final TableField<RentalItemRecord, String> SHORT_DESCRIPTION = createField(DSL.name("short_description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.rental_item.long_description</code>.
     */
    public final TableField<RentalItemRecord, String> LONG_DESCRIPTION = createField(DSL.name("long_description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.rental_item.price_24h</code>.
     */
    public final TableField<RentalItemRecord, BigDecimal> PRICE_24H = createField(DSL.name("price_24h"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.rental_item.price_48h</code>.
     */
    public final TableField<RentalItemRecord, BigDecimal> PRICE_48H = createField(DSL.name("price_48h"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.rental_item.price_168h</code>.
     */
    public final TableField<RentalItemRecord, BigDecimal> PRICE_168H = createField(DSL.name("price_168h"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.rental_item.delivery_possible</code>.
     */
    public final TableField<RentalItemRecord, Boolean> DELIVERY_POSSIBLE = createField(DSL.name("delivery_possible"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.rental_item.delivery_price</code>.
     */
    public final TableField<RentalItemRecord, BigDecimal> DELIVERY_PRICE = createField(DSL.name("delivery_price"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.rental_item.category</code>.
     */
    public final TableField<RentalItemRecord, String> CATEGORY = createField(DSL.name("category"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.rental_item.reach_meters</code>.
     */
    public final TableField<RentalItemRecord, BigDecimal> REACH_METERS = createField(DSL.name("reach_meters"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.rental_item.carrying_weight_kilograms</code>.
     */
    public final TableField<RentalItemRecord, BigDecimal> CARRYING_WEIGHT_KILOGRAMS = createField(DSL.name("carrying_weight_kilograms"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.rental_item.maximum_work_height_meters</code>.
     */
    public final TableField<RentalItemRecord, BigDecimal> MAXIMUM_WORK_HEIGHT_METERS = createField(DSL.name("maximum_work_height_meters"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.rental_item.intrinsic_weight_kilograms</code>.
     */
    public final TableField<RentalItemRecord, BigDecimal> INTRINSIC_WEIGHT_KILOGRAMS = createField(DSL.name("intrinsic_weight_kilograms"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.rental_item.material_type</code>.
     */
    public final TableField<RentalItemRecord, String> MATERIAL_TYPE = createField(DSL.name("material_type"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.rental_item.brand</code>.
     */
    public final TableField<RentalItemRecord, String> BRAND = createField(DSL.name("brand"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.rental_item.maximum_pressure_bars</code>.
     */
    public final TableField<RentalItemRecord, BigDecimal> MAXIMUM_PRESSURE_BARS = createField(DSL.name("maximum_pressure_bars"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.rental_item.maximum_horse_power</code>.
     */
    public final TableField<RentalItemRecord, BigDecimal> MAXIMUM_HORSE_POWER = createField(DSL.name("maximum_horse_power"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.rental_item.required_power_voltage_volt</code>.
     */
    public final TableField<RentalItemRecord, BigDecimal> REQUIRED_POWER_VOLTAGE_VOLT = createField(DSL.name("required_power_voltage_volt"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.rental_item.work_width_meters</code>.
     */
    public final TableField<RentalItemRecord, BigDecimal> WORK_WIDTH_METERS = createField(DSL.name("work_width_meters"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.rental_item.vacuum_attachment_possible</code>.
     */
    public final TableField<RentalItemRecord, Boolean> VACUUM_ATTACHMENT_POSSIBLE = createField(DSL.name("vacuum_attachment_possible"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.rental_item.capacity_liters</code>.
     */
    public final TableField<RentalItemRecord, BigDecimal> CAPACITY_LITERS = createField(DSL.name("capacity_liters"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.rental_item.item_height</code>.
     */
    public final TableField<RentalItemRecord, BigDecimal> ITEM_HEIGHT = createField(DSL.name("item_height"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.rental_item.item_width</code>.
     */
    public final TableField<RentalItemRecord, BigDecimal> ITEM_WIDTH = createField(DSL.name("item_width"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.rental_item.item_length</code>.
     */
    public final TableField<RentalItemRecord, BigDecimal> ITEM_LENGTH = createField(DSL.name("item_length"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.rental_item.power_watt</code>.
     */
    public final TableField<RentalItemRecord, BigDecimal> POWER_WATT = createField(DSL.name("power_watt"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.rental_item.maximum_surface_square_meters</code>.
     */
    public final TableField<RentalItemRecord, BigDecimal> MAXIMUM_SURFACE_SQUARE_METERS = createField(DSL.name("maximum_surface_square_meters"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.rental_item.fuel_type</code>.
     */
    public final TableField<RentalItemRecord, FuelTypeEnum> FUEL_TYPE = createField(DSL.name("fuel_type"), SQLDataType.VARCHAR.asEnumDataType(FuelTypeEnum.class), this, "");

    /**
     * The column <code>public.rental_item.display_status</code>.
     */
    public final TableField<RentalItemRecord, RentalItemDisplayStatus> DISPLAY_STATUS = createField(DSL.name("display_status"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field(DSL.raw("'ACTIVE'::rental_item_display_status"), SQLDataType.VARCHAR)).asEnumDataType(RentalItemDisplayStatus.class), this, "");

    /**
     * The column <code>public.rental_item.slug</code>.
     */
    public final TableField<RentalItemRecord, String> SLUG = createField(DSL.name("slug"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.CLOB)), this, "");

    /**
     * The column <code>public.rental_item.amount</code>.
     */
    public final TableField<RentalItemRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), SQLDataType.NUMERIC.nullable(false).defaultValue(DSL.field(DSL.raw("1"), SQLDataType.NUMERIC)), this, "");

    private RentalItem(Name alias, Table<RentalItemRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private RentalItem(Name alias, Table<RentalItemRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.rental_item</code> table reference
     */
    public RentalItem(String alias) {
        this(DSL.name(alias), RENTAL_ITEM);
    }

    /**
     * Create an aliased <code>public.rental_item</code> table reference
     */
    public RentalItem(Name alias) {
        this(alias, RENTAL_ITEM);
    }

    /**
     * Create a <code>public.rental_item</code> table reference
     */
    public RentalItem() {
        this(DSL.name("rental_item"), null);
    }

    public <O extends Record> RentalItem(Table<O> path, ForeignKey<O, RentalItemRecord> childPath, InverseForeignKey<O, RentalItemRecord> parentPath) {
        super(path, childPath, parentPath, RENTAL_ITEM);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class RentalItemPath extends RentalItem implements Path<RentalItemRecord> {
        public <O extends Record> RentalItemPath(Table<O> path, ForeignKey<O, RentalItemRecord> childPath, InverseForeignKey<O, RentalItemRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private RentalItemPath(Name alias, Table<RentalItemRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public RentalItemPath as(String alias) {
            return new RentalItemPath(DSL.name(alias), this);
        }

        @Override
        public RentalItemPath as(Name alias) {
            return new RentalItemPath(alias, this);
        }

        @Override
        public RentalItemPath as(Table<?> alias) {
            return new RentalItemPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<RentalItemRecord, Long> getIdentity() {
        return (Identity<RentalItemRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<RentalItemRecord> getPrimaryKey() {
        return Keys.RENTAL_ITEM_PKEY;
    }

    @Override
    public List<UniqueKey<RentalItemRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.RENTAL_ITEM_SLUG_KEY);
    }

    @Override
    public List<ForeignKey<RentalItemRecord, ?>> getReferences() {
        return Arrays.asList(Keys.RENTAL_ITEM__RENTAL_ITEM_OWNER_ID_FKEY);
    }

    private transient LessorPath _lessor;

    /**
     * Get the implicit join path to the <code>public.lessor</code> table.
     */
    public LessorPath lessor() {
        if (_lessor == null)
            _lessor = new LessorPath(this, Keys.RENTAL_ITEM__RENTAL_ITEM_OWNER_ID_FKEY, null);

        return _lessor;
    }

    private transient RentalItemImagePath _rentalItemImage;

    /**
     * Get the implicit to-many join path to the
     * <code>public.rental_item_image</code> table
     */
    public RentalItemImagePath rentalItemImage() {
        if (_rentalItemImage == null)
            _rentalItemImage = new RentalItemImagePath(this, null, Keys.RENTAL_ITEM_IMAGE__RENTAL_ITEM_IMAGE_RENTAL_ITEM_ID_FKEY.getInverseKey());

        return _rentalItemImage;
    }

    private transient TransactionPath _transaction;

    /**
     * Get the implicit to-many join path to the <code>public.transaction</code>
     * table
     */
    public TransactionPath transaction() {
        if (_transaction == null)
            _transaction = new TransactionPath(this, null, Keys.TRANSACTION__TRANSACTION_RENTAL_ITEM_ID_FKEY.getInverseKey());

        return _transaction;
    }

    /**
     * Get the implicit many-to-many join path to the <code>public.image</code>
     * table
     */
    public ImagePath image() {
        return rentalItemImage().image();
    }

    @Override
    public RentalItem as(String alias) {
        return new RentalItem(DSL.name(alias), this);
    }

    @Override
    public RentalItem as(Name alias) {
        return new RentalItem(alias, this);
    }

    @Override
    public RentalItem as(Table<?> alias) {
        return new RentalItem(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RentalItem rename(String name) {
        return new RentalItem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RentalItem rename(Name name) {
        return new RentalItem(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RentalItem rename(Table<?> name) {
        return new RentalItem(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RentalItem where(Condition condition) {
        return new RentalItem(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RentalItem where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RentalItem where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RentalItem where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RentalItem where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RentalItem where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RentalItem where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RentalItem where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RentalItem whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RentalItem whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
